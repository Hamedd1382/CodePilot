@{
    ViewData["Title"] = "Chat";
}

<button class="toggle-sidebar" onclick="toggleSidebar()">
    <div class="toggle-bar"></div>
    <div class="toggle-bar"></div>
    <div class="toggle-bar"></div>
</button>
<div class="sidebar hidden" id="sidebar">
    <h2>Chat History</h2>
    <div class="chat-history" id="chatHistory">
    </div>
    <button onclick="startNewChat()">New Chat</button>
    <div class="account-settings">
        <a>Settings</a>
        <a asp-action="Logout" asp-controller="Account">Log Out</a>
    </div>
</div>
<div class="chat-container" id="chatContainer">
    <div class="chat-header">CodePilot</div>
    <div class="chat-messages" id="chatMessages">
        <!-- Active chat messages will be loaded here -->
    </div>
    <div class="chat-input">
        <textarea id="userInput" placeholder="Type your message..."></textarea>
        <button id="sendBtn">
            <svg width="32" height="32" viewBox="0 0 32 32" fill="none"
                 xmlns="http://www.w3.org/2000/svg" class="icon-2xl">
                <path fill-rule="evenodd" clip-rule="evenodd"
                      d="M15.1918 8.90615C15.6381 8.45983 16.3618 8.45983 16.8081 8.90615L21.9509 14.049C22.3972 14.4953 22.3972 15.2189 21.9509 15.6652C21.5046 16.1116 20.781 16.1116 20.3347 15.6652L17.1428 12.4734V22.2857C17.1428 22.9169 16.6311 23.4286 15.9999 23.4286C15.3688 23.4286 14.8571 22.9169 14.8571 22.2857V12.4734L11.6652 15.6652C11.2189 16.1116 10.4953 16.1116 10.049 15.6652C9.60265 15.2189 9.60265 14.4953 10.049 14.049L15.1918 8.90615Z"
                      fill="currentColor"></path>
            </svg>
        </button>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

<script>
    $(function () {
        $.post('/Chat/ChatHistory', function (value) {
            if (value != null) {
                $('#chatHistory').html(value)
            }
        })
    })
</script>

<script>
    const chatContainer = document.getElementById('chatContainer');
    const chatMessages = document.getElementById('chatMessages');
    const chatHistory = document.getElementById('chatHistory');
    const userInput = document.getElementById('userInput');
    const sendBtn = document.getElementById('sendBtn');
    const sidebar = document.getElementById('sidebar');
    function addMessage(text, sender) {
        const messageElem = document.createElement('div');
        messageElem.classList.add('message', sender);
        messageElem.innerHTML = marked.parse(text);
        chatMessages.appendChild(messageElem);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    function toggleSidebar() {
        sidebar.classList.toggle('hidden');
    }

    function startNewChat() {
        chatMessages.innerHTML = '';
        document.querySelectorAll('.chat-item.active').forEach(item => item.classList.remove('active'));
        sidebar.classList.add('hidden');
    }

    async function getAIResponse(message) {
        let ChatId = $('div.chat-item.active').attr("data-chat-id");
        const payload = {
            Message: message,
            ChatId: ChatId
        };

        const response = await fetch('/Chat/GetChatResponse', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        let done = false;
        let accumulatedText = "";

        while (!done) {
            const { value, done: doneReading } = await reader.read();
            done = doneReading;
            if (value) {
                const chunk = decoder.decode(value);
                accumulatedText += chunk;
                const htmlContent = marked.parse(accumulatedText);
                updateBotMessage(htmlContent);
            }
        }

        if (!document.querySelector('#chatHistory .chat-item.active')) {
            $.post('/Chat/ChatHistory', function (value) {
                if (value != null) {
                    $('#chatHistory').html(value);
                    $('#chatHistory .chat-item').first().addClass('active');
                }
            });
        }

    }
    function updateBotMessage(htmlContent) {
        const messages = document.querySelectorAll('.message.bot');
        if (messages.length > 0) {
            messages[messages.length - 1].innerHTML = htmlContent;
        } else {
            const messageElem = document.createElement('div');
            messageElem.classList.add('message', 'bot');
            messageElem.innerHTML = htmlContent;
            chatMessages.appendChild(messageElem);
        }
    }

    function sendMessage() {
        const text = userInput.value.trim();
        if (!text) return;
        userInput.value = '';
        addMessage(text, 'user');
        addMessage("", 'bot');
        getAIResponse(text);
    }

    sendBtn.addEventListener('click', sendMessage);
    userInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
    });

    //--- New ---
    function selectChat(chatId) {
        document.querySelectorAll('.chat-item').forEach(item => item.classList.remove('active'));
        const selectedChatElem = document.getElementById(`chat-${chatId}`);
        if (selectedChatElem) {
            selectedChatElem.classList.add('active');
        }
        sidebar.classList.add('hidden');
        $.post('/Chat/ChatMessages', { chatId: chatId }, function (value) {
            if (value != null) {
                $('#chatMessages').html(value);
            }
        });
    }

    function deleteChat(chatId) {
        if (!confirm('Are you sure you want to delete this chat?')) return;
        fetch('/Chat/DeleteChat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(chatId)
        }).then(response => {
            if (response.ok) {
                const chatElem = document.getElementById(`chat-${chatId}`);
                if (chatElem) {
                    if (chatElem.classList.contains('active')) {
                        chatMessages.innerHTML = '';
                    }
                    chatElem.remove();
                }
                chatHistoryData = chatHistoryData.filter(c => c.ChatId !== chatId);
            } else {
                alert('Error deleting chat.');
            }
        }).catch(error => console.error('Error deleting chat:', error));
        sidebar.classList.add('hidden');
    }
</script>